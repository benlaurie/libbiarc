/****************************************************************************
** Aux2DPlotWindow meta object code from reading C++ file 'Widgets.h'
**
** Created: Fri Jun 22 15:28:04 2007
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.7   edited Oct 19 16:22 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "Widgets.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.7. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *Aux2DPlotWindow::className() const
{
    return "Aux2DPlotWindow";
}

QMetaObject *Aux2DPlotWindow::metaObj = 0;
static QMetaObjectCleanUp cleanUp_Aux2DPlotWindow( "Aux2DPlotWindow", &Aux2DPlotWindow::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString Aux2DPlotWindow::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Aux2DPlotWindow", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString Aux2DPlotWindow::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "Aux2DPlotWindow", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* Aux2DPlotWindow::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QWidget::staticMetaObject();
    static const QUMethod slot_0 = {"openFile", 0, 0 };
    static const QUMethod slot_1 = {"popcoords", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "openFile()", &slot_0, QMetaData::Private },
	{ "popcoords()", &slot_1, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_ptr, "float", QUParameter::In },
	{ 0, &static_QUType_ptr, "float", QUParameter::In },
	{ 0, &static_QUType_ptr, "float", QUParameter::In },
	{ 0, &static_QUType_ptr, "float", QUParameter::In }
    };
    static const QUMethod signal_0 = {"pos_changed", 4, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "pos_changed(float,float,float,float)", &signal_0, QMetaData::Private }
    };
    metaObj = QMetaObject::new_metaobject(
	"Aux2DPlotWindow", parentObject,
	slot_tbl, 2,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_Aux2DPlotWindow.setMetaObject( metaObj );
    return metaObj;
}

void* Aux2DPlotWindow::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "Aux2DPlotWindow" ) )
	return this;
    return QWidget::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL pos_changed
void Aux2DPlotWindow::pos_changed( float t0, float t1, float t2, float t3 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[5];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_ptr.set(o+2,&t1);
    static_QUType_ptr.set(o+3,&t2);
    static_QUType_ptr.set(o+4,&t3);
    activate_signal( clist, o );
}

bool Aux2DPlotWindow::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: openFile(); break;
    case 1: popcoords(); break;
    default:
	return QWidget::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool Aux2DPlotWindow::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: pos_changed((float)(*((float*)static_QUType_ptr.get(_o+1))),(float)(*((float*)static_QUType_ptr.get(_o+2))),(float)(*((float*)static_QUType_ptr.get(_o+3))),(float)(*((float*)static_QUType_ptr.get(_o+4)))); break;
    default:
	return QWidget::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool Aux2DPlotWindow::qt_property( int id, int f, QVariant* v)
{
    return QWidget::qt_property( id, f, v);
}

bool Aux2DPlotWindow::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *ImageIconProvider::className() const
{
    return "ImageIconProvider";
}

QMetaObject *ImageIconProvider::metaObj = 0;
static QMetaObjectCleanUp cleanUp_ImageIconProvider( "ImageIconProvider", &ImageIconProvider::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString ImageIconProvider::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "ImageIconProvider", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString ImageIconProvider::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "ImageIconProvider", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* ImageIconProvider::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QFileIconProvider::staticMetaObject();
    metaObj = QMetaObject::new_metaobject(
	"ImageIconProvider", parentObject,
	0, 0,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_ImageIconProvider.setMetaObject( metaObj );
    return metaObj;
}

void* ImageIconProvider::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "ImageIconProvider" ) )
	return this;
    return QFileIconProvider::qt_cast( clname );
}

bool ImageIconProvider::qt_invoke( int _id, QUObject* _o )
{
    return QFileIconProvider::qt_invoke(_id,_o);
}

bool ImageIconProvider::qt_emit( int _id, QUObject* _o )
{
    return QFileIconProvider::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool ImageIconProvider::qt_property( int id, int f, QVariant* v)
{
    return QFileIconProvider::qt_property( id, f, v);
}

bool ImageIconProvider::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
